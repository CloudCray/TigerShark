{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Tigershark","google":"","body":"TigerShark is an X12 EDI message parser that can be tailored to\r\na specific partner in the health care payment ecosystem.\r\n\r\nIt contains a test directory, tools and a demo web application that does\r\na little bit of claim display and edit.\r\n\r\nState of the Project\r\n====================\r\n\r\nVersion 0.2\r\n-----------\r\nI've added a setup.py script and organized the files a bit more. I'm\r\nconsidering this a major version bump because the inclusion of setup.py and\r\npregenerated parsers makes this a *lot* closer to a fully usable package. I\r\nmake no claim that any parser other than the 835 works as expected, since I\r\nhave only dealt with 835 files so far.\r\n\r\nDevelopment will probably slow down now that things are mostly working. In the\r\npipeline are auto-generated facades, or facades for 270/271 files, whichever\r\nI need to do first.\r\n\r\nIf this sort of thing interests you, the awesome biotech startup where I\r\nwork is hiring. I can't say much about it other than it involves genes, real\r\nscience, and we are currently saving lives and improving the future of\r\nhumanity. Do drop me a line.\r\n\r\n(Insurance billing is a painful but necessary step in this process.)\r\n\r\nVersion 0.1\r\n-----------\r\n\r\nTigerShark was initially developed by [S. Lott](https://github.com/slott56),\r\net. al. The code was recently released at my request, after I stumbled on a\r\nfew blog posts about the project:\r\n\r\n  1. [Python as Config Language - Forget XML and INI files (Jan 12, 2008)](http://www.itmaybeahack.com/homepage/iblog/C465799452/E20080111205451.html)\r\n  2. [Two Python Config-File Design Patterns (Jan 19, 2008)](http://www.itmaybeahack.com/homepage/iblog/C465799452/E20080119082306.html)\r\n  3. [Configuration File Scalability - Who Knew? (Revised) (Jan 26, 2008)](http://www.itmaybeahack.com/homepage/iblog/C465799452/E20080126181253.html)\r\n  4. [Python as Configuration Language - More Good Ideas (March 28, 2008)](http://www.itmaybeahack.com/homepage/iblog/C465799452/E20080328172746.html)\r\n  5. [Synchronicity and Document Object Models. (March 31, 2008)](http://www.itmaybeahack.com/homepage/iblog/C465799452/E20080331113231.html)\r\n  6. [POPO and GOPS - Plain Old Python Objects and Good Old Python Syntax (April 1, 2008)](http://www.itmaybeahack.com/homepage/iblog/C412398194/E20080401060105.html)\r\n\r\nBy the time I found those posts I had been struggling with X12 files for\r\nabout two weeks, dealing with broken parsers and PDFs that cost thousands of\r\ndollars that describe the spec over 750 pages in human - but not, or only\r\nbarely, machine - readable format. (How the healthcare industry gets away with\r\ngetting the government to mandate a proprietary file format which you have to\r\npay to read is the subject of another rant...).\r\n\r\nI was struck by the amount of good, deep thought that went into the decisions\r\nS. Lott made, especially as compared to everything else I had seen. If you\r\nwant to contribute to this project, I highly encourage you to go read those\r\nposts first.\r\n\r\nWhat you see in verion 0.1 is a series of hacks to get TigerShark working.\r\nI fixed a few bugs, added a facade for 835 files, and added setup instructions\r\nto the readme. The facade code is a mess (I didn't have enough time to fully\r\nunderstand the descriptor pattern and all of the underlying data structures\r\nSteven used), and I'll have to come back and make it nicer. Ultimately the\r\nfacade should be able to be generated straight from the xml files which are\r\nused to build the parser. I removed a bunch of files that didn't appear to\r\nbe used anywhere. I didn't try to get the demo django site working, and I'll\r\neither remove it or add instructions for it in a later version.\r\n\r\nMany thanks to [S. Lott](https://github.com/slott56) for releasing the code\r\nand answering my questions, and to [John Holland](https://github.com/azoner)\r\nfor providing the xml files in his package [pyX12](https://github.com/azoner/pyx12).\r\n\r\nInstallation\r\n============\r\n\r\n    python setup.py install\r\n\r\nManually Generating the Parsers\r\n-------------------------------\r\n\r\nThe `setup.py` script will install default parsers, but you might want to\r\ngenerate your own, or you're fixing the generation script and need to test.\r\nYou can either convert all of the 4010 xml files in `Downloads/pyx12-1.5.0.zip`\r\nor convert a file individually (which gives you more control over the result).\r\n\r\n### Generating All Parsers From PyX12 archive ###\r\n\r\nIf you just want to generate all of the parsers, you can use the\r\n`generate_all_parsers` script:\r\n\r\n    python tools/generate_all_parsers.py ../Downloads/pyx12-1.5.0.zip -p parsers\r\n\r\nThis will generate all parsers in a directory called `parsers`.\r\n\r\n### Generating A Single Parser ###\r\n\r\nAfter extracting the xml files, you can create the related parser objects\r\nusing the tools:\r\n\r\n    cd Downloads/\r\n    unzip pyx12-1.5.0.zip\r\n    cd ../tigershark/parsers\r\n    python ../tools/convertPyX12.py 835.4010.X091.A1.xml M835_4010_X091_A1.py -b ../../Downloads/pyx12-1.5.0/map/ -n parsed_835\r\n\r\nThis will generate a `M835_4010_X091_A1.py` parser in your current directory.\r\n\r\nUsage\r\n=====\r\n\r\nUsing a Parser\r\n--------------\r\n\r\n    from tigershark.parsers import M835_4010_X091_A1\r\n    m = M835_4010_X091_A1.parsed_835\r\n    with open('/Users/sbuss/remits/95567.63695.20120314.150150528.ERA.835.edi', 'r') as f:\r\n        parsed = m.unmarshall(f.read().strip())\r\n\r\nUsing a Facade\r\n-----------------\r\n\r\nOnce you have parsed an X12 file, you can build a Facade around it:\r\n\r\n    from tigershark.facade.f835 import f835_4010\r\n    f = F835_4010(parsed)\r\n\r\nNow you can access the segments of the X12 file in an easy and pythonic way\r\n\r\n    >>> print(f.payee.zip)\r\n    94066\r\n    >>> print(f.payer.name)\r\n    United Healthcare\r\n    >>> print(len(f.claims))\r\n    150\r\n","tagline":"X12 Message Processing"}